type Query {
  getTest(by: TestUniqueWhere!, filter: TestWhere): Test
  listTest(filter: TestWhere, orderBy: [TestOrderBy!], offset: Int, limit: Int): [Test!]!
  paginateTest(filter: TestWhere, orderBy: [TestOrderBy!], skip: Int, first: Int): TestConnection!
  validateCreateTest(data: TestCreateInput!): _ValidationResult!
  validateUpdateTest(by: TestUniqueWhere!, data: TestUpdateInput!): _ValidationResult!
  transaction: QueryTransaction
  _info: Info
}

type Test {
  _meta: TestMeta
  id: UUID!
  c: String
}

type TestMeta {
  id: FieldMeta
  c: FieldMeta
}

type FieldMeta {
  readable: Boolean
  updatable: Boolean
}

scalar UUID

input TestUniqueWhere {
  id: UUID
}

input TestWhere {
  id: UUIDCondition
  c: StringCondition
  and: [TestWhere]
  or: [TestWhere]
  not: TestWhere
}

input UUIDCondition {
  and: [UUIDCondition!]
  or: [UUIDCondition!]
  not: UUIDCondition
  null: Boolean
  isNull: Boolean
  eq: UUID
  notEq: UUID
  in: [UUID!]
  notIn: [UUID!]
  lt: UUID
  lte: UUID
  gt: UUID
  gte: UUID
}

input StringCondition {
  and: [StringCondition!]
  or: [StringCondition!]
  not: StringCondition
  null: Boolean
  isNull: Boolean
  eq: String
  notEq: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  containsCI: String
  startsWithCI: String
  endsWithCI: String
}

input TestOrderBy {
  _random: Boolean
  _randomSeeded: Int
  id: OrderDirection
  c: OrderDirection
}

enum OrderDirection {
  asc
  desc
  ascNullsFirst
  descNullsLast
}

type TestConnection {
  pageInfo: PageInfo!
  edges: [TestEdge!]!
}

type PageInfo {
  totalCount: Int!
}

type TestEdge {
  node: Test!
}

type _ValidationResult {
  valid: Boolean!
  errors: [_ValidationError!]!
}

type _ValidationError {
  path: [_PathFragment!]!
  message: _ValidationMessage!
}

union _PathFragment = _FieldPathFragment | _IndexPathFragment

type _FieldPathFragment {
  field: String!
}

type _IndexPathFragment {
  index: Int!
  alias: String
}

type _ValidationMessage {
  text: String!
}

input TestCreateInput {
  a: String
  _dummy_field_: Boolean
}

input TestUpdateInput {
  b: String
  _dummy_field_: Boolean
}

type QueryTransaction {
  getTest(by: TestUniqueWhere!, filter: TestWhere): Test
  listTest(filter: TestWhere, orderBy: [TestOrderBy!], offset: Int, limit: Int): [Test!]!
  paginateTest(filter: TestWhere, orderBy: [TestOrderBy!], skip: Int, first: Int): TestConnection!
  validateCreateTest(data: TestCreateInput!): _ValidationResult!
  validateUpdateTest(by: TestUniqueWhere!, data: TestUpdateInput!): _ValidationResult!
}

type Info {
  description: String
}

type Mutation {
  createTest(data: TestCreateInput!): TestCreateResult!
  updateTest(by: TestUniqueWhere!, filter: TestWhere, data: TestUpdateInput!): TestUpdateResult!
  upsertTest(by: TestUniqueWhere!, filter: TestWhere, update: TestUpdateInput!, create: TestCreateInput!): TestUpsertResult!
  transaction(options: MutationTransactionOptions): MutationTransaction!
  query: QueryPortal!
}

type TestCreateResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Test
  validation: _ValidationResult!
}

interface MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
}

type _MutationError {
  path: [_PathFragment!]! @deprecated(reason: "Use `paths`.")
  paths: [[_PathFragment!]!]!
  type: _MutationErrorType!
  message: String
}

enum _MutationErrorType {
  NotNullConstraintViolation
  UniqueConstraintViolation
  ForeignKeyConstraintViolation
  NotFoundOrDenied
  NonUniqueWhereInput
  InvalidDataInput
  SqlError
}

type TestUpdateResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Test
  validation: _ValidationResult!
}

type TestUpsertResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Test
  validation: _ValidationResult!
}

type MutationTransaction {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  validation: _ValidationResult!
  createTest(data: TestCreateInput!): TestCreateResult!
  updateTest(by: TestUniqueWhere!, filter: TestWhere, data: TestUpdateInput!): TestUpdateResult!
  upsertTest(by: TestUniqueWhere!, filter: TestWhere, update: TestUpdateInput!, create: TestCreateInput!): TestUpsertResult!
  query: QueryPortal
}

type QueryPortal {
  getTest(by: TestUniqueWhere!, filter: TestWhere): Test
  listTest(filter: TestWhere, orderBy: [TestOrderBy!], offset: Int, limit: Int): [Test!]!
  paginateTest(filter: TestWhere, orderBy: [TestOrderBy!], skip: Int, first: Int): TestConnection!
  validateCreateTest(data: TestCreateInput!): _ValidationResult!
  validateUpdateTest(by: TestUniqueWhere!, data: TestUpdateInput!): _ValidationResult!
  transaction: QueryTransaction
  _info: Info
}

input MutationTransactionOptions {
  deferForeignKeyConstraints: Boolean
}
