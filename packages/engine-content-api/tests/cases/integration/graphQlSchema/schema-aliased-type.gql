type Query {
  getAuthor(by: AuthorUniqueWhere!, filter: AuthorWhere): Author
  listAuthor(filter: AuthorWhere, orderBy: [AuthorOrderBy!], offset: Int, limit: Int): [Author!]!
  paginateAuthor(filter: AuthorWhere, orderBy: [AuthorOrderBy!], skip: Int, first: Int): AuthorConnection!
  validateCreateAuthor(data: AuthorCreateInput!): _ValidationResult!
  validateUpdateAuthor(by: AuthorUniqueWhere!, data: AuthorUpdateInput!): _ValidationResult!
  transaction: QueryTransaction
  _info: Info
}

type Author {
  _meta: AuthorMeta
  id: UUID!
  name: AuthorName
}

type AuthorMeta {
  id: FieldMeta
  name: FieldMeta
}

type FieldMeta {
  readable: Boolean
  updatable: Boolean
}

scalar UUID

scalar AuthorName

input AuthorUniqueWhere {
  id: UUID
}

input AuthorWhere {
  id: UUIDCondition
  name: AuthorNameCondition
  and: [AuthorWhere]
  or: [AuthorWhere]
  not: AuthorWhere
}

input UUIDCondition {
  and: [UUIDCondition!]
  or: [UUIDCondition!]
  not: UUIDCondition
  null: Boolean
  isNull: Boolean
  eq: UUID
  notEq: UUID
  in: [UUID!]
  notIn: [UUID!]
  lt: UUID
  lte: UUID
  gt: UUID
  gte: UUID
}

input AuthorNameCondition {
  and: [AuthorNameCondition!]
  or: [AuthorNameCondition!]
  not: AuthorNameCondition
  null: Boolean
  isNull: Boolean
  eq: AuthorName
  notEq: AuthorName
  in: [AuthorName!]
  notIn: [AuthorName!]
  lt: AuthorName
  lte: AuthorName
  gt: AuthorName
  gte: AuthorName
}

input AuthorOrderBy {
  _random: Boolean
  _randomSeeded: Int
  id: OrderDirection
  name: OrderDirection
}

enum OrderDirection {
  asc
  desc
  ascNullsFirst
  descNullsLast
}

type AuthorConnection {
  pageInfo: PageInfo!
  edges: [AuthorEdge!]!
}

type PageInfo {
  totalCount: Int!
}

type AuthorEdge {
  node: Author!
}

type _ValidationResult {
  valid: Boolean!
  errors: [_ValidationError!]!
}

type _ValidationError {
  path: [_PathFragment!]!
  message: _ValidationMessage!
}

union _PathFragment = _FieldPathFragment | _IndexPathFragment

type _FieldPathFragment {
  field: String!
}

type _IndexPathFragment {
  index: Int!
  alias: String
}

type _ValidationMessage {
  text: String!
}

input AuthorCreateInput {
  name: AuthorName
  _dummy_field_: Boolean
}

input AuthorUpdateInput {
  name: AuthorName
  _dummy_field_: Boolean
}

type QueryTransaction {
  getAuthor(by: AuthorUniqueWhere!, filter: AuthorWhere): Author
  listAuthor(filter: AuthorWhere, orderBy: [AuthorOrderBy!], offset: Int, limit: Int): [Author!]!
  paginateAuthor(filter: AuthorWhere, orderBy: [AuthorOrderBy!], skip: Int, first: Int): AuthorConnection!
  validateCreateAuthor(data: AuthorCreateInput!): _ValidationResult!
  validateUpdateAuthor(by: AuthorUniqueWhere!, data: AuthorUpdateInput!): _ValidationResult!
}

type Info {
  description: String
}

type Mutation {
  createAuthor(data: AuthorCreateInput!): AuthorCreateResult!
  deleteAuthor(by: AuthorUniqueWhere!, filter: AuthorWhere): AuthorDeleteResult!
  updateAuthor(by: AuthorUniqueWhere!, filter: AuthorWhere, data: AuthorUpdateInput!): AuthorUpdateResult!
  upsertAuthor(by: AuthorUniqueWhere!, filter: AuthorWhere, update: AuthorUpdateInput!, create: AuthorCreateInput!): AuthorUpsertResult!
  transaction(options: MutationTransactionOptions): MutationTransaction!
  query: QueryPortal!
}

type AuthorCreateResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Author
  validation: _ValidationResult!
}

interface MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
}

type _MutationError {
  path: [_PathFragment!]! @deprecated(reason: "Use `paths`.")
  paths: [[_PathFragment!]!]!
  type: _MutationErrorType!
  message: String
}

enum _MutationErrorType {
  NotNullConstraintViolation
  UniqueConstraintViolation
  ForeignKeyConstraintViolation
  NotFoundOrDenied
  NonUniqueWhereInput
  InvalidDataInput
  SqlError
}

type AuthorDeleteResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Author
}

type AuthorUpdateResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Author
  validation: _ValidationResult!
}

type AuthorUpsertResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Author
  validation: _ValidationResult!
}

type MutationTransaction {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  validation: _ValidationResult!
  createAuthor(data: AuthorCreateInput!): AuthorCreateResult!
  deleteAuthor(by: AuthorUniqueWhere!, filter: AuthorWhere): AuthorDeleteResult!
  updateAuthor(by: AuthorUniqueWhere!, filter: AuthorWhere, data: AuthorUpdateInput!): AuthorUpdateResult!
  upsertAuthor(by: AuthorUniqueWhere!, filter: AuthorWhere, update: AuthorUpdateInput!, create: AuthorCreateInput!): AuthorUpsertResult!
  query: QueryPortal
}

type QueryPortal {
  getAuthor(by: AuthorUniqueWhere!, filter: AuthorWhere): Author
  listAuthor(filter: AuthorWhere, orderBy: [AuthorOrderBy!], offset: Int, limit: Int): [Author!]!
  paginateAuthor(filter: AuthorWhere, orderBy: [AuthorOrderBy!], skip: Int, first: Int): AuthorConnection!
  validateCreateAuthor(data: AuthorCreateInput!): _ValidationResult!
  validateUpdateAuthor(by: AuthorUniqueWhere!, data: AuthorUpdateInput!): _ValidationResult!
  transaction: QueryTransaction
  _info: Info
}

input MutationTransactionOptions {
  deferForeignKeyConstraints: Boolean
}
